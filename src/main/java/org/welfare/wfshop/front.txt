https://www.thymeleaf.org/documentation.html
장점:
스프링 부트와의 강력한 통합 지원 (스프링 부트 3.x에서 기본적으로 권장).
서버 사이드 렌더링 방식으로 JSP를 대체하기에 적합.
HTML 템플릿 엔진으로, HTML 파일을 그대로 유지하면서 동적 데이터 바인딩 가능.
학습 곡선이 완만하고, 기존 JSP 개발자들이 쉽게 적응 가능.
단점:
서버 사이드 렌더링 방식이므로, SPA(Single Page Application)처럼 동적인 사용자 경험 제공에는 한계.
대규모 애플리케이션에서 프론트엔드와 백엔드의 분리가 어려울 수 있음.
추천:
기존 JSP를 대체할 서버 사이드 렌더링 기술로 적합하며, 복잡한 프론트엔드 요구사항이 없다면 타임리프를 사용하는 것이 좋습니다.

1. JSP에서 타임리프로 전환의 난이도
쉬운 점:
HTML 기반: JSP와 타임리프 모두 HTML 기반이므로, 기존 JSP의 HTML 구조를 대부분 재사용할 수 있습니다.
스프링과의 통합: 타임리프는 스프링 부트와 자연스럽게 통합되며, 기존 컨트롤러와 서비스 로직은 대부분 수정 없이 사용할 수 있습니다.
표현식의 유사성: JSP의 ${} 표현식과 타임리프의 ${} 표현식은 유사하게 동작하므로 데이터 바인딩 방식이 익숙할 것입니다.
어려운 점:
JSP 태그 라이브러리 대체: JSP에서 사용하던 JSTL(예: <c:forEach>, <c:if>)이나 커스텀 태그는 타임리프의 문법으로 변환해야 합니다.
예: <c:forEach> → 타임리프의 th:each
예: <c:if> → 타임리프의 th:if
스크립틀릿 제거: JSP에서 사용하던 <% %> 스크립틀릿은 타임리프에서 지원하지 않으므로, 이를 컨트롤러나 서비스 계층으로 옮겨야 합니다.
URL 처리 방식 변경: JSP의 ${pageContext.request.contextPath}와 같은 URL 처리 방식은 타임리프의 @{} 문법으로 변경해야 합니다.
예: <a href="${pageContext.request.contextPath}/example"> → <a th:href="@{/example}">
정적 리소스 경로 변경: JSP에서는 정적 리소스를 /resources나 /static 경로에서 직접 참조했을 수 있지만, 타임리프에서는 th:src나 th:href를 사용해 경로를 지정해야 합니다.
예: <img src="/resources/images/logo.png"> → <img th:src="@{/images/logo.png}">


예: <c:forEach> → th:each
예: <c:if> → th:if

<link rel="stylesheet" href="/css/style.css"> → <link rel="stylesheet" th:href="@{/css/style.css}">