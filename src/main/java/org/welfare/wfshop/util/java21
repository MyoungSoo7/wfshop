https://openjdk.org/projects/jdk/21/
1.1 Java 21의 주요 변화
Virtual Threads (Project Loom): 대규모 동시성을 처리할 때 유용하지만, 기존의 Thread와는 동작 방식이 다르므로 학습이 필요합니다.
처음에는 기존의 ExecutorService를 사용하고, 나중에 Virtual Threads로 전환해보는 것도 좋습니다.
Record: 데이터 객체를 간단히 표현할 수 있는 Record를 활용하면 DTO나 VO를 더 간결하게 작성할 수 있습니다.
Switch Expressions: 기존의 switch 문법보다 간결하고 강력한 표현이 가능하므로 적극 활용해보세요.
Pattern Matching: 조건문에서 객체 타입을 검사하고 처리하는 코드를 간결하게 작성할 수 있습니다.
https://spring.io/guides
1.2 Spring Boot 3.x의 주요 변화
Java 17 이상 필수: Java 8은 더 이상 지원되지 않으므로 Java 17 이상으로 업그레이드해야 합니다.
Jakarta EE로 전환: Spring Boot 3.x는 기존의 Java EE 대신 Jakarta EE를 사용합니다. 예를 들어,
javax.persistence가 jakarta.persistence로 변경되었습니다. 기존 코드를 수정해야 할 수 있습니다.
Spring Security 6.x: Spring Security의 설정 방식이 변경되었습니다. 기존의 WebSecurityConfigurerAdapter는 더 이상 사용되지 않으며,
 SecurityFilterChain을 사용해야 합니다.
GraalVM 네이티브 이미지 지원: 네이티브 이미지를 사용하면 애플리케이션의 시작 속도와 메모리 사용량을 크게 줄일 수 있습니다.
하지만 처음에는 일반 JVM으로 실행하고, 나중에 네이티브 이미지를 시도해보는 것이 좋습니다.

3. 이커머스 도메인 개발 시 고려할 점
이커머스 도메인은 복잡한 비즈니스 로직과 다양한 기능을 포함합니다. 아래는 주요 도메인과 관련된 조언입니다:

3.1 사용자 관리
JWT 기반 인증: Spring Security 6.x를 사용하여 JWT 기반 인증을 구현하세요. OAuth2를 사용하여 소셜 로그인(Google, Facebook 등)도 추가할 수 있습니다.
비밀번호 암호화: BCryptPasswordEncoder를 사용하여 비밀번호를 안전하게 저장하세요.
3.2 상품 관리
카테고리와 태그: 상품을 카테고리와 태그로 분류하여 검색 기능을 강화하세요.
이미지 업로드: 상품 이미지를 업로드할 수 있도록 AWS S3 또는 로컬 파일 시스템을 활용하세요.
3.3 주문 처리
트랜잭션 관리: 주문 생성, 결제, 재고 감소 등의 작업은 트랜잭션으로 묶어야 합니다.
이벤트 기반 처리: Kafka 또는 RabbitMQ를 사용하여 주문 완료 후 알림 전송, 재고 업데이트 등을 비동기로 처리하세요.
3.4 결제
결제 게이트웨이 연동: PayPal, Stripe, 국내 PG사(KCP, 이니시스 등)와 연동하여 결제 기능을 구현하세요.
보안: HTTPS를 사용하고, 민감한 결제 정보를 안전하게 처리하세요.
3.5 검색 및 성능
Elasticsearch: 상품 검색 기능을 강화하기 위해 Elasticsearch를 도입할 수 있습니다.
캐싱: Redis를 사용하여 자주 조회되는 데이터를 캐싱하세요(예: 인기 상품, 카테고리 목록 등).
3.6 확장성
마이크로서비스: 처음에는 단일 애플리케이션으로 시작하되, 나중에 사용자 관리, 주문 처리, 결제 등을 마이크로서비스로 분리할 수 있습니다.
클라우드 배포: AWS, GCP, Azure와 같은 클라우드 플랫폼을 사용하여 확장성과 가용성을 높이세요.